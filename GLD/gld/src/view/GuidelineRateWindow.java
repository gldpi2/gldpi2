/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import controller.GuidelineRateCtrl;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import model.GuidelineRate;
import model.GuidelineRateTableModel;
import model.Login;

/**
 *
 * @author gld-pi2
 */
public class GuidelineRateWindow extends javax.swing.JPanel {

    private NewMainMenu newMenu;
    private Login userLogged;
    private GuidelineRateCtrl guidelineCtrl;
    private List<GuidelineRate> guidelineList;
    private GuidelineRateTableModel table;
    private int selectedRow = 0;
    private GuidelineRate guidelineEdit;
    private GuidelineRateWindowInfo guideInfo;

    /**
     * Creates new form GuidelineRateWindow
     */
    public GuidelineRateWindow(int y, Login user) {
        userLogged = user;

        this.guidelineCtrl = new GuidelineRateCtrl();
        this.table = new GuidelineRateTableModel();

        try {
            this.guidelineList = this.guidelineCtrl.readGuidelineRate();
            this.table.addGuidelineRateList(this.guidelineList);
        } catch (SQLException ex) {
            Logger.getLogger(GuidelineRateWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        //jTable1.setValueAt(table, y, y);
        initComponents();
        initialVisibleComponents();
        setSize(1024, y);

    }

    public void initialVisibleComponents() {
        categoryLabel.setVisible(false);
        categoryLabelEdition.setVisible(false);
        categoryTextField.setVisible(false);
        categoryTextFieldEdition.setVisible(false);
        icmsLabel.setVisible(false);
        icmsLabelEdition.setVisible(false);
        icmsTextField.setVisible(false);
        icmsTextFieldEdition.setVisible(false);
        peakDemandLabel.setVisible(false);
        peakDemandLabelEdition.setVisible(false);
        peakDemandField.setVisible(false);
        peakDemandFieldEdition.setVisible(false);
        offPeakDemandLabel.setVisible(false);
        offPeakDemandLabelEdition.setVisible(false);
        offPeakDemandField.setVisible(false);
        offPeakDemandFieldEdition.setVisible(false);
        consumptionDryOffPeakLabel.setVisible(false);
        consumptionDryOffPeakLabelEdition.setVisible(false);
        consumptionDryOffPeakField.setVisible(false);
        consumptionDryOffPeakFieldEdition.setVisible(false);
        consumptionDryPeakLabel.setVisible(false);
        consumptionDryPeakLabelEdition.setVisible(false);
        consumptionDryPeakField.setVisible(false);
        consumptionDryPeakFieldEdition.setVisible(false);
        consumptionHumidOffPeakLabel.setVisible(false);
        consumptionHumidOffPeakLabelEdition.setVisible(false);
        consumptionHumidOffPeakField.setVisible(false);
        consumptionHumidOffPeakFieldEdition.setVisible(false);
        consumptionHumidPeakLabel.setVisible(false);
        consumptionHumidPeakLabelEdition.setVisible(false);
        consumptionHumidPeakField.setVisible(false);
        consumptionHumidPeakFieldEdition.setVisible(false);
        transpassedOffPeakLabel.setVisible(false);
        transpassedOffPeakLabelEdition.setVisible(false);
        transpassedOffPeakTextField.setVisible(false);
        transpassedOffPeakTextFieldEdition.setVisible(false);
        transpassedPeakLabel.setVisible(false);
        transpassedPeakLabelEdition.setVisible(false);
        transpassedPeakField.setVisible(false);
        transpassedPeakFieldEdition.setVisible(false);
        normalDemandLabel.setVisible(false);
        normalDemandLabelEdition.setVisible(false);
        normalDemandTextField.setVisible(false);
        normalDemandTextFieldEdition.setVisible(false);
        transpassedDemandLabel.setVisible(false);
        transpassedDemandLabelEdition.setVisible(false);
        transpassedDemandTextField.setVisible(false);
        transpassedDemandTextFieldEdition.setVisible(false);
    }

    private void clean() {
        guidelineComboBox.setSelectedIndex(0);
        categoryTextField.setText("");
        icmsTextField.setText("");
        peakDemandField.setText("");
        offPeakDemandField.setText("");
        consumptionHumidPeakField.setText("");
        consumptionDryPeakField.setText("");
        consumptionHumidOffPeakField.setText("");
        consumptionDryOffPeakField.setText("");
        transpassedPeakField.setText("");
        transpassedOffPeakTextField.setText("");
        normalDemandTextField.setText("");
        transpassedDemandTextField.setText("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        insertPanel = new javax.swing.JPanel();
        guidelineComboBox = new javax.swing.JComboBox();
        guidelineRateLabel = new javax.swing.JLabel();
        categoryLabel = new javax.swing.JLabel();
        icmsLabel = new javax.swing.JLabel();
        peakDemandLabel = new javax.swing.JLabel();
        consumptionDryPeakLabel = new javax.swing.JLabel();
        consumptionDryPeakField = new javax.swing.JTextField();
        consumptionDryOffPeakLabel = new javax.swing.JLabel();
        transpassedOffPeakLabel = new javax.swing.JLabel();
        consumptionDryOffPeakField = new javax.swing.JTextField();
        peakDemandField = new javax.swing.JTextField();
        offPeakDemandLabel = new javax.swing.JLabel();
        consumptionHumidPeakLabel = new javax.swing.JLabel();
        consumptionHumidPeakField = new javax.swing.JTextField();
        consumptionHumidOffPeakField = new javax.swing.JTextField();
        consumptionHumidOffPeakLabel = new javax.swing.JLabel();
        warningLabel = new javax.swing.JLabel();
        createGuidelineButton = new javax.swing.JButton();
        offPeakDemandField = new javax.swing.JTextField();
        transpassedPeakLabel = new javax.swing.JLabel();
        transpassedPeakField = new javax.swing.JTextField();
        icmsTextField = new javax.swing.JTextField();
        categoryTextField = new javax.swing.JTextField();
        transpassedOffPeakTextField = new javax.swing.JTextField();
        normalDemandLabel = new javax.swing.JLabel();
        transpassedDemandLabel = new javax.swing.JLabel();
        normalDemandTextField = new javax.swing.JTextField();
        transpassedDemandTextField = new javax.swing.JTextField();
        editPanel = new javax.swing.JPanel();
        warningLabel1 = new javax.swing.JLabel();
        editGuidelineButton = new javax.swing.JButton();
        guidelineRateLabelEdition = new javax.swing.JLabel();
        guidelineComboBoxEdition = new javax.swing.JComboBox();
        categoryLabelEdition = new javax.swing.JLabel();
        categoryTextFieldEdition = new javax.swing.JTextField();
        icmsLabelEdition = new javax.swing.JLabel();
        icmsTextFieldEdition = new javax.swing.JTextField();
        peakDemandLabelEdition = new javax.swing.JLabel();
        peakDemandFieldEdition = new javax.swing.JTextField();
        offPeakDemandLabelEdition = new javax.swing.JLabel();
        offPeakDemandFieldEdition = new javax.swing.JTextField();
        consumptionDryPeakLabelEdition = new javax.swing.JLabel();
        consumptionDryPeakFieldEdition = new javax.swing.JTextField();
        consumptionDryOffPeakLabelEdition = new javax.swing.JLabel();
        consumptionDryOffPeakFieldEdition = new javax.swing.JTextField();
        consumptionHumidPeakLabelEdition = new javax.swing.JLabel();
        consumptionHumidPeakFieldEdition = new javax.swing.JTextField();
        consumptionHumidOffPeakLabelEdition = new javax.swing.JLabel();
        consumptionHumidOffPeakFieldEdition = new javax.swing.JTextField();
        transpassedPeakLabelEdition = new javax.swing.JLabel();
        transpassedPeakFieldEdition = new javax.swing.JTextField();
        transpassedOffPeakLabelEdition = new javax.swing.JLabel();
        transpassedOffPeakTextFieldEdition = new javax.swing.JTextField();
        transpassedDemandTextFieldEdition = new javax.swing.JTextField();
        normalDemandLabelEdition = new javax.swing.JLabel();
        normalDemandTextFieldEdition = new javax.swing.JTextField();
        transpassedDemandLabelEdition = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        readPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        backToMainMenu = new javax.swing.JButton();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Cadastro de Enquadramento Tarif√°rio", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Bitstream Charter", 0, 24))); // NOI18N

        jTabbedPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabbedPane1MouseClicked(evt);
            }
        });

        guidelineComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Selecione a Tarifa", "Horo-Sazonal Azul", "Horo-Sazonal Verde" }));
        guidelineComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                guidelineComboBoxItemStateChanged(evt);
            }
        });

        guidelineRateLabel.setText("Tipo de Tarifa*:");
        guidelineRateLabel.setName(""); // NOI18N

        categoryLabel.setText("Categoria*:");

        icmsLabel.setText("ICMS*:");

        peakDemandLabel.setText("Demanda em Ponta*:");

        consumptionDryPeakLabel.setText("Consumo em Ponta Seca*:");

        consumptionDryOffPeakLabel.setText("Consumo Fora de Ponta Seca*:");

        transpassedOffPeakLabel.setText("Ultrapassado Fora de Ponta*:");

        offPeakDemandLabel.setText("Demanda Fora de Ponta*:");

        consumptionHumidPeakLabel.setText("Consumo em Ponta √ömida*:");

        consumptionHumidOffPeakLabel.setText("Custo Energia √ömida*:");

        warningLabel.setText("<html>Os campos assinalados com asterisco (*) <br>s√£o de preencimento obrigat√≥rio</html>");

        createGuidelineButton.setText("Cadastrar");
        createGuidelineButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createGuidelineButtonActionPerformed(evt);
            }
        });

        offPeakDemandField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                offPeakDemandFieldFocusLost(evt);
            }
        });

        transpassedPeakLabel.setText("Ultrapassado na Ponta*:");

        normalDemandLabel.setText("Demanda Normal*:");

        transpassedDemandLabel.setText("Demanda Ultrapassada*:");

        javax.swing.GroupLayout insertPanelLayout = new javax.swing.GroupLayout(insertPanel);
        insertPanel.setLayout(insertPanelLayout);
        insertPanelLayout.setHorizontalGroup(
            insertPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(insertPanelLayout.createSequentialGroup()
                .addGroup(insertPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, insertPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(createGuidelineButton))
                    .addGroup(insertPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(insertPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(insertPanelLayout.createSequentialGroup()
                                .addComponent(consumptionDryPeakLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(consumptionDryPeakField, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(insertPanelLayout.createSequentialGroup()
                                .addComponent(consumptionDryOffPeakLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(consumptionDryOffPeakField, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, insertPanelLayout.createSequentialGroup()
                                .addComponent(icmsLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(icmsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(insertPanelLayout.createSequentialGroup()
                                .addComponent(peakDemandLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(peakDemandField, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(insertPanelLayout.createSequentialGroup()
                                .addComponent(offPeakDemandLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(offPeakDemandField, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(insertPanelLayout.createSequentialGroup()
                                .addComponent(consumptionHumidPeakLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(consumptionHumidPeakField, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(insertPanelLayout.createSequentialGroup()
                                .addComponent(consumptionHumidOffPeakLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(consumptionHumidOffPeakField, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(categoryTextField)
                            .addGroup(insertPanelLayout.createSequentialGroup()
                                .addGroup(insertPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(guidelineRateLabel)
                                    .addComponent(warningLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(categoryLabel)
                                    .addComponent(guidelineComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, insertPanelLayout.createSequentialGroup()
                                .addGroup(insertPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(transpassedPeakLabel)
                                    .addComponent(transpassedOffPeakLabel)
                                    .addComponent(transpassedDemandLabel)
                                    .addComponent(normalDemandLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(insertPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(normalDemandTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE)
                                    .addComponent(transpassedDemandTextField)
                                    .addComponent(transpassedOffPeakTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE)
                                    .addComponent(transpassedPeakField, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE))))))
                .addContainerGap())
        );
        insertPanelLayout.setVerticalGroup(
            insertPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(insertPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(guidelineRateLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(guidelineComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(categoryLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(categoryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(insertPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(icmsLabel)
                    .addComponent(icmsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(insertPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(peakDemandField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(peakDemandLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(insertPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(offPeakDemandLabel)
                    .addComponent(offPeakDemandField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(insertPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(consumptionDryPeakField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(consumptionDryPeakLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(insertPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(consumptionDryOffPeakLabel)
                    .addComponent(consumptionDryOffPeakField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(insertPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(consumptionHumidPeakLabel)
                    .addComponent(consumptionHumidPeakField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(insertPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(consumptionHumidOffPeakLabel)
                    .addComponent(consumptionHumidOffPeakField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(insertPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(normalDemandLabel)
                    .addComponent(normalDemandTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(insertPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(transpassedDemandLabel)
                    .addComponent(transpassedDemandTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(insertPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(transpassedPeakLabel)
                    .addComponent(transpassedPeakField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(insertPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(transpassedOffPeakLabel)
                    .addComponent(transpassedOffPeakTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 107, Short.MAX_VALUE)
                .addComponent(warningLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(createGuidelineButton)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Inserir", insertPanel);

        warningLabel1.setText("<html>Os campos assinalados com asterisco (*) <br>s√£o de preencimento obrigat√≥rio</html>");

        editGuidelineButton.setText("Editar");
        editGuidelineButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editGuidelineButtonActionPerformed(evt);
            }
        });

        guidelineRateLabelEdition.setText("Tipo de Tarifa*:");
        guidelineRateLabelEdition.setName(""); // NOI18N

        guidelineComboBoxEdition.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Selecione a Tarifa", "Convencional", "Horo-Sazonal Azul", "Horo-Sazonal Verde" }));
        guidelineComboBoxEdition.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                guidelineComboBoxEditionItemStateChanged(evt);
            }
        });

        categoryLabelEdition.setText("Categoria*:");

        icmsLabelEdition.setText("ICMS*:");

        peakDemandLabelEdition.setText("Demanda em Ponta*:");

        offPeakDemandLabelEdition.setText("Demanda Fora de Ponta*:");

        offPeakDemandFieldEdition.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                offPeakDemandFieldEditionFocusLost(evt);
            }
        });

        consumptionDryPeakLabelEdition.setText("Consumo em Ponta Seca*:");

        consumptionDryOffPeakLabelEdition.setText("Consumo Fora de Ponta Seca*:");

        consumptionHumidPeakLabelEdition.setText("Consumo em Ponta √ömida*:");

        consumptionHumidOffPeakLabelEdition.setText("Custo Energia √ömida*:");

        transpassedPeakLabelEdition.setText("Ultrapassado na Ponta*:");

        transpassedOffPeakLabelEdition.setText("Ultrapassado Fora de Ponta*:");

        normalDemandLabelEdition.setText("Demanda Normal*:");

        transpassedDemandLabelEdition.setText("Demanda Ultrapassada*:");

        javax.swing.GroupLayout editPanelLayout = new javax.swing.GroupLayout(editPanel);
        editPanel.setLayout(editPanelLayout);
        editPanelLayout.setHorizontalGroup(
            editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(editPanelLayout.createSequentialGroup()
                        .addComponent(consumptionDryPeakLabelEdition)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(consumptionDryPeakFieldEdition, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(editPanelLayout.createSequentialGroup()
                        .addComponent(consumptionDryOffPeakLabelEdition)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(consumptionDryOffPeakFieldEdition, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, editPanelLayout.createSequentialGroup()
                        .addComponent(icmsLabelEdition)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(icmsTextFieldEdition, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(editPanelLayout.createSequentialGroup()
                        .addComponent(peakDemandLabelEdition)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(peakDemandFieldEdition, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(editPanelLayout.createSequentialGroup()
                        .addComponent(offPeakDemandLabelEdition)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(offPeakDemandFieldEdition, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(editPanelLayout.createSequentialGroup()
                        .addComponent(consumptionHumidPeakLabelEdition)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(consumptionHumidPeakFieldEdition, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(editPanelLayout.createSequentialGroup()
                        .addComponent(consumptionHumidOffPeakLabelEdition)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(consumptionHumidOffPeakFieldEdition, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, editPanelLayout.createSequentialGroup()
                        .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(transpassedPeakLabelEdition)
                            .addComponent(transpassedOffPeakLabelEdition))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(transpassedOffPeakTextFieldEdition, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(transpassedPeakFieldEdition, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(categoryTextFieldEdition)
                    .addGroup(editPanelLayout.createSequentialGroup()
                        .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(warningLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(guidelineRateLabelEdition)
                            .addComponent(categoryLabelEdition)
                            .addComponent(guidelineComboBoxEdition, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, editPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(editGuidelineButton))
                    .addGroup(editPanelLayout.createSequentialGroup()
                        .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(transpassedDemandLabelEdition)
                            .addComponent(normalDemandLabelEdition))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(normalDemandTextFieldEdition, javax.swing.GroupLayout.DEFAULT_SIZE, 85, Short.MAX_VALUE)
                            .addComponent(transpassedDemandTextFieldEdition))))
                .addContainerGap())
        );
        editPanelLayout.setVerticalGroup(
            editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, editPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(guidelineRateLabelEdition)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(guidelineComboBoxEdition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(categoryLabelEdition)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(categoryTextFieldEdition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(icmsLabelEdition)
                    .addComponent(icmsTextFieldEdition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(peakDemandFieldEdition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(peakDemandLabelEdition))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(offPeakDemandLabelEdition)
                    .addComponent(offPeakDemandFieldEdition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(consumptionDryPeakFieldEdition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(consumptionDryPeakLabelEdition))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(consumptionDryOffPeakLabelEdition)
                    .addComponent(consumptionDryOffPeakFieldEdition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(consumptionHumidPeakLabelEdition)
                    .addComponent(consumptionHumidPeakFieldEdition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(consumptionHumidOffPeakLabelEdition)
                    .addComponent(consumptionHumidOffPeakFieldEdition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(normalDemandLabelEdition)
                    .addComponent(normalDemandTextFieldEdition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(transpassedDemandLabelEdition)
                    .addComponent(transpassedDemandTextFieldEdition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(transpassedPeakLabelEdition)
                    .addComponent(transpassedPeakFieldEdition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(transpassedOffPeakLabelEdition)
                    .addComponent(transpassedOffPeakTextFieldEdition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 101, Short.MAX_VALUE)
                .addComponent(warningLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(editGuidelineButton)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Editar", editPanel);

        readPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Enquadramentos Registrados"));

        jTable1.setModel(table);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout readPanelLayout = new javax.swing.GroupLayout(readPanel);
        readPanel.setLayout(readPanelLayout);
        readPanelLayout.setHorizontalGroup(
            readPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 590, Short.MAX_VALUE)
        );
        readPanelLayout.setVerticalGroup(
            readPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );

        backToMainMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/house_go.png"))); // NOI18N
        backToMainMenu.setText("Voltar ao Menu Principal");
        backToMainMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backToMainMenuActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(backToMainMenu))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jTabbedPane1)
                        .addGap(18, 18, 18)
                        .addComponent(readPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1)
                    .addComponent(readPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(backToMainMenu)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backToMainMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backToMainMenuActionPerformed
        int i;

        Object[] options = {"Sim", "N√£o"};
        i = JOptionPane.showOptionDialog(null,
                "Deseja realmente Voltar ao Menu Principal?",
                "Voltar ao Menu Principal",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                new ImageIcon("src/icons/house_go.png"),
                options,
                options[1]);

        if (i == JOptionPane.YES_OPTION) {
            MainWindow.desktop.removeAll();
            newMenu = new NewMainMenu(userLogged);
            MainWindow.desktop.add(newMenu);
            MainWindow.desktop.revalidate();
            MainWindow.desktop.repaint();


        }
    }//GEN-LAST:event_backToMainMenuActionPerformed

    private void createGuidelineButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createGuidelineButtonActionPerformed
//        String guidelineRate = (String) guidelineComboBox.getSelectedItem();
//        String category = (String) categoryTextField.getText();
//        String peakDemand = peakDemandField.getText();
//        String outPeakDemand = offPeakDemandField.getText();
//        String peakEnergyDry = consumptionHumidPeakField.getText();
//        String outPeakEnergyDry = consumptionDryPeakField.getText();
//        String peakEnergyHumid = consumptionHumidOffPeakField.getText();
//        String outPeakEnergyHumid = consumptionDryOffPeakField.getText();
//        String valueTranspassed = transpassedPeakField.getText();
//        String timestamp = "";

        String guidelineRate = (String) guidelineComboBox.getSelectedItem();
        String category = categoryTextField.getText();
        String peakDemand = peakDemandField.getText();
        String offPeakDemand = offPeakDemandField.getText();
        String consumptionDryPeak = consumptionDryPeakField.getText();
        String consumptionDryOffPeak = consumptionDryOffPeakField.getText();
        String consumptionHumidPeak = consumptionHumidPeakField.getText();
        String consumptionHumidOffPeak = consumptionHumidOffPeakField.getText();
        String normalDemand = normalDemandTextField.getText();
        String transpassedDemand = transpassedDemandTextField.getText();
        String transpassedPeak = transpassedPeakField.getText();
        String transpassedOffPeak = transpassedOffPeakTextField.getText();
        String icms = icmsTextField.getText();
        String timestamp = "";

        //@TODO Criar validate
        //validate()
        if (guidelineComboBox.getSelectedItem().toString().equals("Selecione a Tarifa")) {
            JOptionPane.showMessageDialog(null, "Escolha um tipo de tarifa", "Escolha uma op√ß√£o", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (guidelineComboBox.getSelectedItem().toString().equals("Horo-Sazonal Azul")) {
            if (categoryTextField.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "O campo Categoria deve ser preenchido", "Campo Vazio", JOptionPane.WARNING_MESSAGE);
                return;
            }

            if (icmsTextField.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "O campo ICMS deve ser preenchido", "Campo Vazio", JOptionPane.WARNING_MESSAGE);
                return;
            } else if (!icmsTextField.getText().matches("[0-9.]+")) {
                JOptionPane.showMessageDialog(null, "Preencha o campo ICMS apenas com n√∫meros", "Campo Inv√°lido", JOptionPane.WARNING_MESSAGE);
                return;
            }

            if (peakDemandField.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "O campo Demanda em Ponta deve ser preenchido", "Campo Vazio", JOptionPane.WARNING_MESSAGE);
                return;
            } else if (!peakDemandField.getText().matches("[0-9.]+")) {
                JOptionPane.showMessageDialog(null, "Preencha o campo Demanda em Ponta apenas com n√∫meros", "Campo Inv√°lido", JOptionPane.WARNING_MESSAGE);
                return;
            }

            if (offPeakDemandField.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "O campo Demanda Fora de Ponta deve ser preenchido", "Campo Vazio", JOptionPane.WARNING_MESSAGE);
                return;
            } else if (!offPeakDemandField.getText().matches("[0-9.]+")) {
                JOptionPane.showMessageDialog(null, "Preencha o campo Demanda Fora Ponta apenas com n√∫meros", "Campo Inv√°lido", JOptionPane.WARNING_MESSAGE);
                return;
            }

            if (consumptionDryPeakField.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "O campo Consumo em Ponta Seca deve ser preenchido", "Campo Vazio", JOptionPane.WARNING_MESSAGE);
                return;
            } else if (!consumptionDryPeakField.getText().matches("[0-9.]+")) {
                JOptionPane.showMessageDialog(null, "Preencha o campo Consumo em Ponta Seca apenas com n√∫meros", "Campo Inv√°lido", JOptionPane.WARNING_MESSAGE);
                return;
            }

            if (consumptionDryOffPeakField.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "O campo Consumo Fora de Ponta Seca deve ser preenchido", "Campo Vazio", JOptionPane.WARNING_MESSAGE);
                return;
            } else if (!consumptionDryOffPeakField.getText().matches("[0-9.]+")) {
                JOptionPane.showMessageDialog(null, "Preencha o campo Consumo Fora de Ponta Seca apenas com n√∫meros", "Campo Inv√°lido", JOptionPane.WARNING_MESSAGE);
                return;
            }

            if (consumptionHumidPeakField.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "O campo Consumo em Ponta √ömida deve ser preenchido", "Campo Vazio", JOptionPane.WARNING_MESSAGE);
                return;
            } else if (!consumptionHumidPeakField.getText().matches("[0-9.]+")) {
                JOptionPane.showMessageDialog(null, "Preencha o campo Consumo em Ponta √ömida apenas com n√∫meros", "Campo Inv√°lido", JOptionPane.WARNING_MESSAGE);
                return;
            }

            if (consumptionHumidOffPeakField.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "O campo Consumo Fora de Ponta √ömida deve ser preenchido", "Campo Vazio", JOptionPane.WARNING_MESSAGE);
                return;
            } else if (!consumptionHumidOffPeakField.getText().matches("[0-9.]+")) {
                JOptionPane.showMessageDialog(null, "Preencha o campo Consumo Fora Ponta √ömida apenas com n√∫meros", "Campo Inv√°lido", JOptionPane.WARNING_MESSAGE);
                return;
            }

            if (transpassedPeakField.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "O campo Ultrapassado na Ponta deve ser preenchido", "Campo Vazio", JOptionPane.WARNING_MESSAGE);
                return;
            } else if (!transpassedPeakField.getText().matches("[0-9.]+")) {
                JOptionPane.showMessageDialog(null, "Preencha o campo Ultrapassado na Ponta apenas com n√∫meros", "Campo Inv√°lido", JOptionPane.WARNING_MESSAGE);
                return;
            }

            if (transpassedOffPeakTextField.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "O campo Ultrapassado Fora de Ponta deve ser preenchido", "Campo Vazio", JOptionPane.WARNING_MESSAGE);
                return;
            } else if (!transpassedOffPeakTextField.getText().matches("[0-9.]+")) {
                JOptionPane.showMessageDialog(null, "Preencha o campo Ultrapassado Fora de Ponta apenas com n√∫meros", "Campo Inv√°lido", JOptionPane.WARNING_MESSAGE);
                return;
            }
        } else if(guidelineComboBox.getSelectedItem().toString().equals("Horo-Sazonal Verde")){
                        if (categoryTextField.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "O campo Categoria deve ser preenchido", "Campo Vazio", JOptionPane.WARNING_MESSAGE);
                return;
            }

            if (icmsTextField.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "O campo ICMS deve ser preenchido", "Campo Vazio", JOptionPane.WARNING_MESSAGE);
                return;
            } else if (!icmsTextField.getText().matches("[0-9.]+")) {
                JOptionPane.showMessageDialog(null, "Preencha o campo ICMS apenas com n√∫meros", "Campo Inv√°lido", JOptionPane.WARNING_MESSAGE);
                return;
            }

            if (consumptionDryPeakField.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "O campo Consumo em Ponta Seca deve ser preenchido", "Campo Vazio", JOptionPane.WARNING_MESSAGE);
                return;
            } else if (!consumptionDryPeakField.getText().matches("[0-9.]+")) {
                JOptionPane.showMessageDialog(null, "Preencha o campo Consumo em Ponta Seca apenas com n√∫meros", "Campo Inv√°lido", JOptionPane.WARNING_MESSAGE);
                return;
            }

            if (consumptionDryOffPeakField.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "O campo Consumo Fora de Ponta Seca deve ser preenchido", "Campo Vazio", JOptionPane.WARNING_MESSAGE);
                return;
            } else if (!consumptionDryOffPeakField.getText().matches("[0-9.]+")) {
                JOptionPane.showMessageDialog(null, "Preencha o campo Consumo Fora de Ponta Seca apenas com n√∫meros", "Campo Inv√°lido", JOptionPane.WARNING_MESSAGE);
                return;
            }

            if (consumptionHumidPeakField.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "O campo Consumo em Ponta √ömida deve ser preenchido", "Campo Vazio", JOptionPane.WARNING_MESSAGE);
                return;
            } else if (!consumptionHumidPeakField.getText().matches("[0-9.]+")) {
                JOptionPane.showMessageDialog(null, "Preencha o campo Consumo em Ponta √ömida apenas com n√∫meros", "Campo Inv√°lido", JOptionPane.WARNING_MESSAGE);
                return;
            }

            if (consumptionHumidOffPeakField.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "O campo Consumo Fora de Ponta √ömida deve ser preenchido", "Campo Vazio", JOptionPane.WARNING_MESSAGE);
                return;
            } else if (!consumptionHumidOffPeakField.getText().matches("[0-9.]+")) {
                JOptionPane.showMessageDialog(null, "Preencha o campo Consumo Fora Ponta √ömida apenas com n√∫meros", "Campo Inv√°lido", JOptionPane.WARNING_MESSAGE);
                return;
            }

            if (normalDemandTextField.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "O campo Demanda Normal deve ser preenchido", "Campo Vazio", JOptionPane.WARNING_MESSAGE);
                return;
            } else if (!normalDemandTextField.getText().matches("[0-9.]+")) {
                JOptionPane.showMessageDialog(null, "Preencha o campo Demanda Normal apenas com n√∫meros", "Campo Inv√°lido", JOptionPane.WARNING_MESSAGE);
                return;
            }

            if (transpassedDemandTextField.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "O campo Demanda Ultrapassada deve ser preenchido", "Campo Vazio", JOptionPane.WARNING_MESSAGE);
                return;
            } else if (!transpassedDemandTextField.getText().matches("[0-9.]+")) {
                JOptionPane.showMessageDialog(null, "Preencha o campo Demanda Ultrapassada apenas com n√∫meros", "Campo Inv√°lido", JOptionPane.WARNING_MESSAGE);
                return;
            }
        }

        guidelineCtrl.createGuidelineRate(guidelineRate, category, peakDemand,
                offPeakDemand, consumptionDryPeak, consumptionDryOffPeak,
                consumptionHumidPeak, consumptionHumidOffPeak, normalDemand,
                transpassedDemand, transpassedPeak, transpassedOffPeak,
                icms, timestamp);

        JOptionPane.showMessageDialog(null, "Cadastro realizado com sucesso!");

        clean();
        table.limpar();
        try {
            this.guidelineList = this.guidelineCtrl.readGuidelineRate();
            this.table.addGuidelineRateList(this.guidelineList);
            repaint();
        } catch (SQLException ex) {
            Logger.getLogger(GuidelineRateWindow.class.getName()).log(Level.SEVERE, null, ex);
        }


        return;


    }//GEN-LAST:event_createGuidelineButtonActionPerformed

    private void editGuidelineButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editGuidelineButtonActionPerformed

        String guidelineRate = (String) guidelineComboBoxEdition.getSelectedItem();
        String category = categoryTextFieldEdition.getText();
        String demand = categoryTextFieldEdition.getText();
        String peakDemand = peakDemandFieldEdition.getText();
        String offPeakDemand = offPeakDemandFieldEdition.getText();
        String consumptionDryPeak = consumptionDryPeakFieldEdition.getText();
        String consumptionDryOffPeak = consumptionDryOffPeakFieldEdition.getText();
        String consumptionHumidPeak = consumptionHumidPeakFieldEdition.getText();
        String consumptionHumidOffPeak = consumptionHumidOffPeakFieldEdition.getText();
        String normalDemand = normalDemandTextFieldEdition.getText();
        String transpassedDemand = transpassedDemandTextFieldEdition.getText();
        String transpassedPeak = transpassedPeakFieldEdition.getText();
        String transpassedOffPeak = transpassedOffPeakTextFieldEdition.getText();
        String icms = icmsTextField.getText();
        String timestamp = "";

        //@TODO Criar validate
        //valite()
        
        if (guidelineComboBoxEdition.getSelectedItem().toString().equals("Selecione a Tarifa")) {
            JOptionPane.showMessageDialog(null, "Escolha um tipo de tarifa", "Escolha uma op√ß√£o", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (guidelineComboBoxEdition.getSelectedItem().toString().equals("Horo-Sazonal Azul")) {
            if (categoryTextFieldEdition.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "O campo Categoria deve ser preenchido", "Campo Vazio", JOptionPane.WARNING_MESSAGE);
                return;
            }

            if (icmsTextFieldEdition.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "O campo ICMS deve ser preenchido", "Campo Vazio", JOptionPane.WARNING_MESSAGE);
                return;
            } else if (!icmsTextFieldEdition.getText().matches("[0-9.]+")) {
                JOptionPane.showMessageDialog(null, "Preencha o campo ICMS apenas com n√∫meros", "Campo Inv√°lido", JOptionPane.WARNING_MESSAGE);
                return;
            }

            if (peakDemandFieldEdition.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "O campo Demanda em Ponta deve ser preenchido", "Campo Vazio", JOptionPane.WARNING_MESSAGE);
                return;
            } else if (!peakDemandFieldEdition.getText().matches("[0-9.]+")) {
                JOptionPane.showMessageDialog(null, "Preencha o campo Demanda em Ponta apenas com n√∫meros", "Campo Inv√°lido", JOptionPane.WARNING_MESSAGE);
                return;
            }

            if (offPeakDemandFieldEdition.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "O campo Demanda Fora de Ponta deve ser preenchido", "Campo Vazio", JOptionPane.WARNING_MESSAGE);
                return;
            } else if (!offPeakDemandFieldEdition.getText().matches("[0-9.]+")) {
                JOptionPane.showMessageDialog(null, "Preencha o campo Demanda Fora Ponta apenas com n√∫meros", "Campo Inv√°lido", JOptionPane.WARNING_MESSAGE);
                return;
            }

            if (consumptionDryPeakFieldEdition.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "O campo Consumo em Ponta Seca deve ser preenchido", "Campo Vazio", JOptionPane.WARNING_MESSAGE);
                return;
            } else if (!consumptionDryPeakFieldEdition.getText().matches("[0-9.]+")) {
                JOptionPane.showMessageDialog(null, "Preencha o campo Consumo em Ponta Seca apenas com n√∫meros", "Campo Inv√°lido", JOptionPane.WARNING_MESSAGE);
                return;
            }

            if (consumptionDryOffPeakFieldEdition.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "O campo Consumo Fora de Ponta Seca deve ser preenchido", "Campo Vazio", JOptionPane.WARNING_MESSAGE);
                return;
            } else if (!consumptionDryOffPeakFieldEdition.getText().matches("[0-9.]+")) {
                JOptionPane.showMessageDialog(null, "Preencha o campo Consumo Fora de Ponta Seca apenas com n√∫meros", "Campo Inv√°lido", JOptionPane.WARNING_MESSAGE);
                return;
            }

            if (consumptionHumidPeakFieldEdition.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "O campo Consumo em Ponta √ömida deve ser preenchido", "Campo Vazio", JOptionPane.WARNING_MESSAGE);
                return;
            } else if (!consumptionHumidPeakFieldEdition.getText().matches("[0-9.]+")) {
                JOptionPane.showMessageDialog(null, "Preencha o campo Consumo em Ponta √ömida apenas com n√∫meros", "Campo Inv√°lido", JOptionPane.WARNING_MESSAGE);
                return;
            }

            if (consumptionHumidOffPeakFieldEdition.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "O campo Consumo Fora de Ponta √ömida deve ser preenchido", "Campo Vazio", JOptionPane.WARNING_MESSAGE);
                return;
            } else if (!consumptionHumidOffPeakFieldEdition.getText().matches("[0-9.]+")) {
                JOptionPane.showMessageDialog(null, "Preencha o campo Consumo Fora Ponta √ömida apenas com n√∫meros", "Campo Inv√°lido", JOptionPane.WARNING_MESSAGE);
                return;
            }

            if (transpassedPeakFieldEdition.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "O campo Ultrapassado na Ponta deve ser preenchido", "Campo Vazio", JOptionPane.WARNING_MESSAGE);
                return;
            } else if (!transpassedPeakFieldEdition.getText().matches("[0-9.]+")) {
                JOptionPane.showMessageDialog(null, "Preencha o campo Ultrapassado na Ponta apenas com n√∫meros", "Campo Inv√°lido", JOptionPane.WARNING_MESSAGE);
                return;
            }

            if (transpassedOffPeakTextFieldEdition.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "O campo Ultrapassado Fora de Ponta deve ser preenchido", "Campo Vazio", JOptionPane.WARNING_MESSAGE);
                return;
            } else if (!transpassedOffPeakTextFieldEdition.getText().matches("[0-9.]+")) {
                JOptionPane.showMessageDialog(null, "Preencha o campo Ultrapassado Fora de Ponta apenas com n√∫meros", "Campo Inv√°lido", JOptionPane.WARNING_MESSAGE);
                return;
            }
        } else if(guidelineComboBoxEdition.getSelectedItem().toString().equals("Horo-Sazonal Verde")){
                        if (categoryTextFieldEdition.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "O campo Categoria deve ser preenchido", "Campo Vazio", JOptionPane.WARNING_MESSAGE);
                return;
            }

            if (icmsTextFieldEdition.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "O campo ICMS deve ser preenchido", "Campo Vazio", JOptionPane.WARNING_MESSAGE);
                return;
            } else if (!icmsTextFieldEdition.getText().matches("[0-9.]+")) {
                JOptionPane.showMessageDialog(null, "Preencha o campo ICMS apenas com n√∫meros", "Campo Inv√°lido", JOptionPane.WARNING_MESSAGE);
                return;
            }

            if (consumptionDryPeakFieldEdition.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "O campo Consumo em Ponta Seca deve ser preenchido", "Campo Vazio", JOptionPane.WARNING_MESSAGE);
                return;
            } else if (!consumptionDryPeakFieldEdition.getText().matches("[0-9.]+")) {
                JOptionPane.showMessageDialog(null, "Preencha o campo Consumo em Ponta Seca apenas com n√∫meros", "Campo Inv√°lido", JOptionPane.WARNING_MESSAGE);
                return;
            }

            if (consumptionDryOffPeakFieldEdition.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "O campo Consumo Fora de Ponta Seca deve ser preenchido", "Campo Vazio", JOptionPane.WARNING_MESSAGE);
                return;
            } else if (!consumptionDryOffPeakFieldEdition.getText().matches("[0-9.]+")) {
                JOptionPane.showMessageDialog(null, "Preencha o campo Consumo Fora de Ponta Seca apenas com n√∫meros", "Campo Inv√°lido", JOptionPane.WARNING_MESSAGE);
                return;
            }

            if (consumptionHumidPeakFieldEdition.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "O campo Consumo em Ponta √ömida deve ser preenchido", "Campo Vazio", JOptionPane.WARNING_MESSAGE);
                return;
            } else if (!consumptionHumidPeakFieldEdition.getText().matches("[0-9.]+")) {
                JOptionPane.showMessageDialog(null, "Preencha o campo Consumo em Ponta √ömida apenas com n√∫meros", "Campo Inv√°lido", JOptionPane.WARNING_MESSAGE);
                return;
            }

            if (consumptionHumidOffPeakFieldEdition.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "O campo Consumo Fora de Ponta √ömida deve ser preenchido", "Campo Vazio", JOptionPane.WARNING_MESSAGE);
                return;
            } else if (!consumptionHumidOffPeakFieldEdition.getText().matches("[0-9.]+")) {
                JOptionPane.showMessageDialog(null, "Preencha o campo Consumo Fora Ponta √ömida apenas com n√∫meros", "Campo Inv√°lido", JOptionPane.WARNING_MESSAGE);
                return;
            }

            if (normalDemandTextFieldEdition.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "O campo Demanda Normal deve ser preenchido", "Campo Vazio", JOptionPane.WARNING_MESSAGE);
                return;
            } else if (!normalDemandTextFieldEdition.getText().matches("[0-9.]+")) {
                JOptionPane.showMessageDialog(null, "Preencha o campo Demanda Normal apenas com n√∫meros", "Campo Inv√°lido", JOptionPane.WARNING_MESSAGE);
                return;
            }

            if (transpassedDemandTextFieldEdition.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "O campo Demanda Ultrapassada deve ser preenchido", "Campo Vazio", JOptionPane.WARNING_MESSAGE);
                return;
            } else if (!transpassedDemandTextFieldEdition.getText().matches("[0-9.]+")) {
                JOptionPane.showMessageDialog(null, "Preencha o campo Demanda Ultrapassada apenas com n√∫meros", "Campo Inv√°lido", JOptionPane.WARNING_MESSAGE);
                return;
            }
        }

        guidelineCtrl.createGuidelineRate(guidelineRate, category, peakDemand,
                offPeakDemand, consumptionDryPeak, consumptionDryOffPeak,
                consumptionHumidPeak, consumptionHumidOffPeak, normalDemand,
                transpassedDemand, transpassedPeak, transpassedOffPeak,
                icms, timestamp);

        JOptionPane.showMessageDialog(null, "Edit realizado com sucesso!");

        clean();
        table.limpar();
        try {
            this.guidelineList = this.guidelineCtrl.readGuidelineRate();
            this.table.addGuidelineRateList(this.guidelineList);
            repaint();
        } catch (SQLException ex) {
            Logger.getLogger(GuidelineRateWindow.class.getName()).log(Level.SEVERE, null, ex);
        }

        return;
    }//GEN-LAST:event_editGuidelineButtonActionPerformed

    private void guidelineComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_guidelineComboBoxItemStateChanged
        String guidelineRate = (String) guidelineComboBox.getSelectedItem().toString();

        switch (guidelineRate) {
            case ("Horo-Sazonal Azul"):
                initialVisibleComponents();
                categoryLabel.setVisible(true);
                categoryTextField.setVisible(true);
                icmsLabel.setVisible(true);
                icmsTextField.setVisible(true);
                peakDemandLabel.setVisible(true);
                peakDemandField.setVisible(true);
                offPeakDemandLabel.setVisible(true);
                offPeakDemandField.setVisible(true);
                consumptionDryOffPeakLabel.setVisible(true);
                consumptionDryOffPeakField.setVisible(true);
                consumptionDryPeakLabel.setVisible(true);
                consumptionDryPeakField.setVisible(true);
                consumptionHumidOffPeakLabel.setVisible(true);
                consumptionHumidOffPeakField.setVisible(true);
                consumptionHumidPeakLabel.setVisible(true);
                consumptionHumidPeakField.setVisible(true);
                transpassedOffPeakLabel.setVisible(true);
                transpassedOffPeakTextField.setVisible(true);
                transpassedPeakLabel.setVisible(true);
                transpassedPeakField.setVisible(true);
                break;
            case ("Horo-Sazonal Verde"):
                initialVisibleComponents();
                categoryLabel.setVisible(true);
                categoryTextField.setVisible(true);
                icmsLabel.setVisible(true);
                icmsTextField.setVisible(true);
                consumptionDryOffPeakLabel.setVisible(true);
                consumptionDryOffPeakField.setVisible(true);
                consumptionDryPeakLabel.setVisible(true);
                consumptionDryPeakField.setVisible(true);
                consumptionHumidOffPeakLabel.setVisible(true);
                consumptionHumidOffPeakField.setVisible(true);
                consumptionHumidPeakLabel.setVisible(true);
                consumptionHumidPeakField.setVisible(true);
                normalDemandLabel.setVisible(true);
                normalDemandTextField.setVisible(true);
                transpassedDemandLabel.setVisible(true);
                transpassedDemandTextField.setVisible(true);
                break;
            default:
                initialVisibleComponents();
                break;

        }

    }//GEN-LAST:event_guidelineComboBoxItemStateChanged

    private void offPeakDemandFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_offPeakDemandFieldFocusLost
        // TODO add your handling code here:
        System.out.println("Teste");
    }//GEN-LAST:event_offPeakDemandFieldFocusLost

    private void guidelineComboBoxEditionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_guidelineComboBoxEditionItemStateChanged
        String guidelineRateEdition = (String) guidelineComboBoxEdition.getSelectedItem().toString();

        switch (guidelineRateEdition) {
            case ("Horo-Sazonal Azul"):
                initialVisibleComponents();
                categoryLabelEdition.setVisible(true);
                categoryTextFieldEdition.setVisible(true);
                icmsLabelEdition.setVisible(true);
                icmsTextFieldEdition.setVisible(true);
                peakDemandLabelEdition.setVisible(true);
                peakDemandFieldEdition.setVisible(true);
                offPeakDemandLabelEdition.setVisible(true);
                offPeakDemandFieldEdition.setVisible(true);
                consumptionDryOffPeakLabelEdition.setVisible(true);
                consumptionDryOffPeakFieldEdition.setVisible(true);
                consumptionDryPeakLabelEdition.setVisible(true);
                consumptionDryPeakFieldEdition.setVisible(true);
                consumptionHumidOffPeakLabelEdition.setVisible(true);
                consumptionHumidOffPeakFieldEdition.setVisible(true);
                consumptionHumidPeakLabelEdition.setVisible(true);
                consumptionHumidPeakFieldEdition.setVisible(true);
                transpassedOffPeakLabelEdition.setVisible(true);
                transpassedOffPeakTextFieldEdition.setVisible(true);
                transpassedPeakLabelEdition.setVisible(true);
                transpassedPeakFieldEdition.setVisible(true);
                break;
            case ("Horo-Sazonal Verde"):
                initialVisibleComponents();
                categoryLabelEdition.setVisible(true);
                categoryTextFieldEdition.setVisible(true);
                icmsLabelEdition.setVisible(true);
                icmsTextFieldEdition.setVisible(true);
                consumptionDryOffPeakLabelEdition.setVisible(true);
                consumptionDryOffPeakFieldEdition.setVisible(true);
                consumptionDryPeakLabelEdition.setVisible(true);
                consumptionDryPeakFieldEdition.setVisible(true);
                consumptionHumidOffPeakLabelEdition.setVisible(true);
                consumptionHumidOffPeakFieldEdition.setVisible(true);
                consumptionHumidPeakLabelEdition.setVisible(true);
                consumptionHumidPeakFieldEdition.setVisible(true);
                normalDemandLabelEdition.setVisible(true);
                normalDemandTextFieldEdition.setVisible(true);
                transpassedDemandLabelEdition.setVisible(true);
                transpassedDemandTextFieldEdition.setVisible(true);
                break;
            default:
                initialVisibleComponents();
                break;

        }
    }//GEN-LAST:event_guidelineComboBoxEditionItemStateChanged

    private void offPeakDemandFieldEditionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_offPeakDemandFieldEditionFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_offPeakDemandFieldEditionFocusLost

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        int selectedItemIndex = jTable1.getSelectedRow();
        GuidelineRateTableModel model = (GuidelineRateTableModel) jTable1.getModel();
        guidelineEdit = model.getGuidelineRate(selectedItemIndex);

        GuidelineRateWindowInfo guideInfo = new GuidelineRateWindowInfo(guidelineEdit);

        //     icmsTextFieldEdition.setText(guidelineEdit.getIcms());
        //     peakDemandFieldEdition.setText(guidelineEdit.getPeakDemand());


        // guidelineCtrl.up
    }//GEN-LAST:event_jTable1MouseClicked

    private void jTabbedPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane1MouseClicked
        if (jTabbedPane1.getSelectedComponent() != insertPanel) {
            JOptionPane.showMessageDialog(null, "Aten√ß√£o: Os campos s√≥ devem ser editados caso haja "
                    + "cadastro err√¥neo,\n caso contr√°rio deve ser inserido um novo enquadramento!",
                    "Aten√ß√£o!", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jTabbedPane1MouseClicked
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backToMainMenu;
    private javax.swing.JLabel categoryLabel;
    private javax.swing.JLabel categoryLabelEdition;
    private javax.swing.JTextField categoryTextField;
    private javax.swing.JTextField categoryTextFieldEdition;
    private javax.swing.JTextField consumptionDryOffPeakField;
    private javax.swing.JTextField consumptionDryOffPeakFieldEdition;
    private javax.swing.JLabel consumptionDryOffPeakLabel;
    private javax.swing.JLabel consumptionDryOffPeakLabelEdition;
    private javax.swing.JTextField consumptionDryPeakField;
    private javax.swing.JTextField consumptionDryPeakFieldEdition;
    private javax.swing.JLabel consumptionDryPeakLabel;
    private javax.swing.JLabel consumptionDryPeakLabelEdition;
    private javax.swing.JTextField consumptionHumidOffPeakField;
    private javax.swing.JTextField consumptionHumidOffPeakFieldEdition;
    private javax.swing.JLabel consumptionHumidOffPeakLabel;
    private javax.swing.JLabel consumptionHumidOffPeakLabelEdition;
    private javax.swing.JTextField consumptionHumidPeakField;
    private javax.swing.JTextField consumptionHumidPeakFieldEdition;
    private javax.swing.JLabel consumptionHumidPeakLabel;
    private javax.swing.JLabel consumptionHumidPeakLabelEdition;
    private javax.swing.JButton createGuidelineButton;
    private javax.swing.JButton editGuidelineButton;
    private javax.swing.JPanel editPanel;
    public static javax.swing.JComboBox guidelineComboBox;
    public static javax.swing.JComboBox guidelineComboBoxEdition;
    private javax.swing.JLabel guidelineRateLabel;
    private javax.swing.JLabel guidelineRateLabelEdition;
    private javax.swing.JLabel icmsLabel;
    private javax.swing.JLabel icmsLabelEdition;
    private javax.swing.JTextField icmsTextField;
    private javax.swing.JTextField icmsTextFieldEdition;
    private javax.swing.JPanel insertPanel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel normalDemandLabel;
    private javax.swing.JLabel normalDemandLabelEdition;
    private javax.swing.JTextField normalDemandTextField;
    private javax.swing.JTextField normalDemandTextFieldEdition;
    private javax.swing.JTextField offPeakDemandField;
    private javax.swing.JTextField offPeakDemandFieldEdition;
    private javax.swing.JLabel offPeakDemandLabel;
    private javax.swing.JLabel offPeakDemandLabelEdition;
    private javax.swing.JTextField peakDemandField;
    private javax.swing.JTextField peakDemandFieldEdition;
    private javax.swing.JLabel peakDemandLabel;
    private javax.swing.JLabel peakDemandLabelEdition;
    private javax.swing.JPanel readPanel;
    private javax.swing.JLabel transpassedDemandLabel;
    private javax.swing.JLabel transpassedDemandLabelEdition;
    private javax.swing.JTextField transpassedDemandTextField;
    private javax.swing.JTextField transpassedDemandTextFieldEdition;
    private javax.swing.JLabel transpassedOffPeakLabel;
    private javax.swing.JLabel transpassedOffPeakLabelEdition;
    private javax.swing.JTextField transpassedOffPeakTextField;
    private javax.swing.JTextField transpassedOffPeakTextFieldEdition;
    private javax.swing.JTextField transpassedPeakField;
    private javax.swing.JTextField transpassedPeakFieldEdition;
    private javax.swing.JLabel transpassedPeakLabel;
    private javax.swing.JLabel transpassedPeakLabelEdition;
    private javax.swing.JLabel warningLabel;
    private javax.swing.JLabel warningLabel1;
    // End of variables declaration//GEN-END:variables
}
