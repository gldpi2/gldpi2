package view;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.plot.XYPlot;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;


/**
 *
 * @author itallorossi
 */
public class CostChart extends javax.swing.JPanel {
    private static final long serialVersionUID = 1L;
    
    public TimeSeries series;
    public JFreeChart result;
    public ChartPanel myChartPanel;
    int state;

    /**
     * Método construtor para construção do gráfico
     * @param x largua
     * @param y altura
     */
    public CostChart(int x, int y) {
        initComponents();
        setSize(x, y);
    }

   /**
    * Método de criação do gráfico.
    * Utilizando gráfico de series
    */ 
    public void criaGrafico(){
        series = new TimeSeries("R$/kWh", Millisecond.class);
        final TimeSeriesCollection dataset = new TimeSeriesCollection(series);
                       
        result = ChartFactory.createTimeSeriesChart("Gráfico de Custo","Hora", "Valor em Real (R$)",dataset,true,true,false);
        final XYPlot plot = result.getXYPlot();
        ValueAxis axis = plot.getDomainAxis();
        axis.setAutoRange(true);
        axis.setFixedAutoRange(60000.0);
        axis = plot.getRangeAxis();
        axis.setRange(0.0, 10.0);
        
        myChartPanel = new ChartPanel(result, true);
        myChartPanel.setSize(this.getWidth(), this.getHeight());
        myChartPanel.setVisible(true);
        this.removeAll();
        this.add(myChartPanel);
        this.revalidate();
        this.repaint();
        
        
        state = 1;
    }

    /**
     * Método para alteração do tamanho
     * @param x largura
     * @param y altura
     */
    public void changeSize(int x, int y) {
        if (state != 0) {
            myChartPanel.setSize(x, y);
            this.setSize(x, y);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
