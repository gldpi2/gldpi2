/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import controller.ContractCtrl;
import dao.GuidelineRateDAO;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import model.Contract;
import model.ContractTableModel;
import model.GuidelineRate;

import model.Login;
import utils.Communication;

/**
 *
 * @author greg
 */
public class ContractWindow extends javax.swing.JPanel {

    private NewMainMenu newMenu;
    private Login userLogged;
    private ContractCtrl contractCtrl;
    private List<Contract> contractList;
    private ContractTableModel table;
    private int selectedRow = 0;
    public static List<String> guidelineRateNames;
    private List<Integer> guidelineRateIds;
    public static Contract contractEdit;

    /**
     * Creates new form ContractWindow
     */
    public ContractWindow(int y, Login user) {
        userLogged = user;

        this.contractCtrl = new ContractCtrl();
        this.table = new ContractTableModel();

        try {
            this.contractList = this.contractCtrl.readContract();
            this.table.addContractList(this.contractList);
        } catch (SQLException ex) {
            Logger.getLogger(ContractWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
        //jTable1.setValueAt(table, y, y);
        initComponents();
        setSize(1024, y);

        try {
            //local.readGuidelineRate().toArray()
            GuidelineRateDAO local = new GuidelineRateDAO();
            guidelineRateIds = new ArrayList<>();
            guidelineRateNames = new ArrayList<>();
            for (GuidelineRate item : local.readGuidelineRate()) {
                guidelineRateNames.add(item.getGuidelineRate());
                guidelineRateIds.add(item.getIdGuidelineRate());
            }
            guidelineRateComboBox.setModel(new DefaultComboBoxModel(guidelineRateNames.toArray()));
            guidelineRateComboBoxEdition.setModel(new DefaultComboBoxModel(guidelineRateNames.toArray()));
        } catch (SQLException ex) {
            Logger.getLogger(ContractWindow.class.getName()).log(Level.SEVERE, null, ex);
        }


    }

    private void clean() {
        offPeakDemandField.setText("");
        peakDemandField.setText("");
        guidelineRateComboBox.setSelectedIndex(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        insertPanel = new javax.swing.JPanel();
        offPeakDemandLabel = new javax.swing.JLabel();
        emailLabel = new javax.swing.JLabel();
        cell_vivoLabel = new javax.swing.JLabel();
        peakDemandField = new javax.swing.JTextField();
        peakDemandLabel = new javax.swing.JLabel();
        warningLabel = new javax.swing.JLabel();
        createGuidelineButton = new javax.swing.JButton();
        offPeakDemandField = new javax.swing.JTextField();
        guidelineRateLabel = new javax.swing.JLabel();
        guidelineRateComboBox = new javax.swing.JComboBox();
        editPanel = new javax.swing.JPanel();
        warningLabel1 = new javax.swing.JLabel();
        editGuidelineButton = new javax.swing.JButton();
        offPeakDemandLabelEdition = new javax.swing.JLabel();
        offPeakDemandFieldEdition = new javax.swing.JTextField();
        peakDemandLabelEdition = new javax.swing.JLabel();
        peakDemandFieldEdition = new javax.swing.JTextField();
        guidelineRateLabelEdition = new javax.swing.JLabel();
        guidelineRateComboBoxEdition = new javax.swing.JComboBox();
        jSeparator1 = new javax.swing.JSeparator();
        readPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        backToMainMenu = new javax.swing.JButton();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Cadastro Contrato", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Bitstream Charter", 0, 24))); // NOI18N

        offPeakDemandLabel.setText("Demanda Contratada Fora de Ponta*:");

        peakDemandLabel.setText("Demanda Contrada em Ponta*:");

        warningLabel.setText("<html>Os campos assinalados com asterisco (*) <br>são de preencimento obrigatório</html>");

        createGuidelineButton.setText("Cadastrar");
        createGuidelineButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createGuidelineButtonActionPerformed(evt);
            }
        });

        guidelineRateLabel.setText("Enquadramento Tarifário*:");

        guidelineRateComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Selecione o enquadramento tarifário" }));

        javax.swing.GroupLayout insertPanelLayout = new javax.swing.GroupLayout(insertPanel);
        insertPanel.setLayout(insertPanelLayout);
        insertPanelLayout.setHorizontalGroup(
            insertPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(insertPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(insertPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(guidelineRateComboBox, 0, 0, Short.MAX_VALUE)
                    .addGroup(insertPanelLayout.createSequentialGroup()
                        .addGroup(insertPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(insertPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(createGuidelineButton)
                                .addGroup(insertPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cell_vivoLabel)
                                    .addComponent(offPeakDemandLabel)
                                    .addComponent(emailLabel)
                                    .addComponent(offPeakDemandField, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(warningLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(peakDemandLabel)
                                    .addComponent(peakDemandField, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(guidelineRateLabel))
                        .addGap(0, 15, Short.MAX_VALUE)))
                .addContainerGap())
        );
        insertPanelLayout.setVerticalGroup(
            insertPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(insertPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(offPeakDemandLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(offPeakDemandField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(peakDemandLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(peakDemandField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(guidelineRateLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(guidelineRateComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(84, 84, 84)
                .addComponent(cell_vivoLabel)
                .addGap(179, 179, 179)
                .addComponent(warningLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(createGuidelineButton)
                .addGap(218, 218, 218)
                .addComponent(emailLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Inserir", insertPanel);

        warningLabel1.setText("<html>Os campos assinalados com asterisco (*) <br>são de preencimento obrigatório</html>");

        editGuidelineButton.setText("Editar");
        editGuidelineButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editGuidelineButtonActionPerformed(evt);
            }
        });

        offPeakDemandLabelEdition.setText("Demanda Contratada Fora de Ponta*:");

        peakDemandLabelEdition.setText("Demanda Contrada em Ponta*:");

        guidelineRateLabelEdition.setText("Enquadramento Tarifário*:");

        guidelineRateComboBoxEdition.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Selecione o enquadramento tarifário" }));
        guidelineRateComboBoxEdition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guidelineRateComboBoxEditionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout editPanelLayout = new javax.swing.GroupLayout(editPanel);
        editPanel.setLayout(editPanelLayout);
        editPanelLayout.setHorizontalGroup(
            editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(guidelineRateComboBoxEdition, 0, 292, Short.MAX_VALUE)
                    .addGroup(editPanelLayout.createSequentialGroup()
                        .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(editGuidelineButton)
                                .addComponent(warningLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(offPeakDemandLabelEdition)
                            .addComponent(offPeakDemandFieldEdition, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(peakDemandLabelEdition)
                            .addComponent(peakDemandFieldEdition, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(guidelineRateLabelEdition))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        editPanelLayout.setVerticalGroup(
            editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, editPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(offPeakDemandLabelEdition)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(offPeakDemandFieldEdition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(peakDemandLabelEdition)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(peakDemandFieldEdition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(guidelineRateLabelEdition)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(guidelineRateComboBoxEdition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 255, Short.MAX_VALUE)
                .addComponent(warningLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(editGuidelineButton)
                .addGap(17, 17, 17))
        );

        jTabbedPane1.addTab("Editar", editPanel);

        readPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Cadastros Registrados"));

        jScrollPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jScrollPane1MouseClicked(evt);
            }
        });

        jTable1.setModel(table);
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout readPanelLayout = new javax.swing.GroupLayout(readPanel);
        readPanel.setLayout(readPanelLayout);
        readPanelLayout.setHorizontalGroup(
            readPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 634, Short.MAX_VALUE)
        );
        readPanelLayout.setVerticalGroup(
            readPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 575, Short.MAX_VALUE)
        );

        backToMainMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/house_go.png"))); // NOI18N
        backToMainMenu.setText("Voltar ao Menu Principal");
        backToMainMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backToMainMenuActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(backToMainMenu))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(readPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(readPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(backToMainMenu)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backToMainMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backToMainMenuActionPerformed
        int i;

        Object[] options = {"Sim", "Não"};
        i = JOptionPane.showOptionDialog(null,
                "Deseja realmente Voltar ao Menu Principal?",
                "Voltar ao Menu Principal",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                new ImageIcon("src/icons/house_go.png"),
                options,
                options[1]);

        if (i == JOptionPane.YES_OPTION) {
            MainWindow.desktop.removeAll();
            newMenu = new NewMainMenu(userLogged);
            MainWindow.desktop.add(newMenu);
            MainWindow.desktop.revalidate();
            MainWindow.desktop.repaint();


        }
    }//GEN-LAST:event_backToMainMenuActionPerformed

    private void editGuidelineButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editGuidelineButtonActionPerformed
        String offPeakDemand = offPeakDemandFieldEdition.getText();
        String peakDemand = peakDemandFieldEdition.getText();
        int guidelineRate = guidelineRateComboBoxEdition.getSelectedIndex();
        int idRate = guidelineRateIds.get(guidelineRate);
        String timestamp = "";

        //@TODO Criar validate
        //valite()
        if (offPeakDemandFieldEdition.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "O campo Demanda Contratada Fora de Ponta deve ser preenchido", "Campo Vazio", JOptionPane.WARNING_MESSAGE);
            return;
        } else if (!offPeakDemandFieldEdition.getText().matches("[0-9.]+")) {
            JOptionPane.showMessageDialog(null, "Preencha o campo Demanda Contratada Fora de Ponta apenas com números", "Campo Inválido", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (peakDemandFieldEdition.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "O campo Demanda Contratada em Ponta deve ser preenchido", "Campo Vazio", JOptionPane.WARNING_MESSAGE);
            return;
        } else if (!peakDemandFieldEdition.getText().matches("[0-9.]+")) {
            JOptionPane.showMessageDialog(null, "Preencha o campo Demanda Contratada em Ponta apenas com números", "Campo Inválido", JOptionPane.WARNING_MESSAGE);
            return;
        }

        contractCtrl.createContract(peakDemand, offPeakDemand, idRate, timestamp);

        JOptionPane.showMessageDialog(null, "Edit realizado com sucesso!");

        clean();

        //Communication.UDPClient.sendData(, 9786, timestamp, idRate, peakDemand, offPeakDemand);

        return;
    }//GEN-LAST:event_editGuidelineButtonActionPerformed

    private void createGuidelineButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createGuidelineButtonActionPerformed
        String offPeakDemand = offPeakDemandField.getText();
        String peakDemand = peakDemandField.getText();
        int guidelineRate = guidelineRateComboBox.getSelectedIndex();
        int idRate = guidelineRateIds.get(guidelineRate);
        String timestamp = "";

        //@TODO Criar validate
        //valite()
        if (offPeakDemandField.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "O campo Demanda Contratada Fora de Ponta deve ser preenchido", "Campo Vazio", JOptionPane.WARNING_MESSAGE);
            return;
        } else if (!offPeakDemandField.getText().matches("[0-9.]+")) {
            JOptionPane.showMessageDialog(null, "Preencha o campo Demanda Contratada Fora de Ponta apenas com números", "Campo Inválido", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (peakDemandField.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "O campo Demanda Contratada em Ponta deve ser preenchido", "Campo Vazio", JOptionPane.WARNING_MESSAGE);
            return;
        } else if (!peakDemandField.getText().matches("[0-9.]+")) {
            JOptionPane.showMessageDialog(null, "Preencha o campo Demanda Contratada em Ponta apenas com números", "Campo Inválido", JOptionPane.WARNING_MESSAGE);
            return;
        }

        contractCtrl.createContract(peakDemand, offPeakDemand, idRate,
                timestamp);

        JOptionPane.showMessageDialog(null, "Cadastro realizado com sucesso!");

        clean();

        try {
            this.contractList = this.contractCtrl.readContract();
            this.table.addContractList(this.contractList);
        } catch (SQLException ex) {
            Logger.getLogger(ContractWindow.class.getName()).log(Level.SEVERE, null, ex);
        }

        //Communication.UDPClient.sendData(, 9786, timestamp, idRate, peakDemand, offPeakDemand);
        return;

    }//GEN-LAST:event_createGuidelineButtonActionPerformed

    private void guidelineRateComboBoxEditionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guidelineRateComboBoxEditionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_guidelineRateComboBoxEditionActionPerformed

    private void jScrollPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane1MouseClicked
        int selectedItemIndex = jTable1.getSelectedRow();
        ContractTableModel model = (ContractTableModel) jTable1.getModel();
        contractEdit = model.getContract(selectedItemIndex);
        
        ContractFrameInfo contractInfo = new ContractFrameInfo();
        contractInfo.setVisible(true);
    }//GEN-LAST:event_jScrollPane1MouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backToMainMenu;
    private javax.swing.JLabel cell_vivoLabel;
    private javax.swing.JButton createGuidelineButton;
    private javax.swing.JButton editGuidelineButton;
    private javax.swing.JPanel editPanel;
    private javax.swing.JLabel emailLabel;
    public static javax.swing.JComboBox guidelineRateComboBox;
    private javax.swing.JComboBox guidelineRateComboBoxEdition;
    private javax.swing.JLabel guidelineRateLabel;
    private javax.swing.JLabel guidelineRateLabelEdition;
    private javax.swing.JPanel insertPanel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField offPeakDemandField;
    private javax.swing.JTextField offPeakDemandFieldEdition;
    private javax.swing.JLabel offPeakDemandLabel;
    private javax.swing.JLabel offPeakDemandLabelEdition;
    private javax.swing.JTextField peakDemandField;
    private javax.swing.JTextField peakDemandFieldEdition;
    private javax.swing.JLabel peakDemandLabel;
    private javax.swing.JLabel peakDemandLabelEdition;
    private javax.swing.JPanel readPanel;
    private javax.swing.JLabel warningLabel;
    private javax.swing.JLabel warningLabel1;
    // End of variables declaration//GEN-END:variables
}
