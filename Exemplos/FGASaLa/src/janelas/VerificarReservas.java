package janelas;

import classes.Reserva;
import classes.Sala;
import db.ReservaDAO;
import db.SalaDAO;
import java.awt.Color;
import java.awt.Component;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.ResourceBundle;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import projetofinaltecnicas.Main;

/**
 *
 * @author itallorossi
 */
public class VerificarReservas extends javax.swing.JPanel {

    int idSala;
    int idSolic=0;
    String[] horario = {"08:00-09:50","10:00-11:50","11:50-13:30","13:30-15:20","15:30-17:20","17:30-19:20","19:30-21:20"};
    String[] status = new String[3];

    String[] headerSala = new String[8];
    String[] headerLab = new String[9];

    String idioma;
    String usuario;
    /** Creates new form VerificarReservas */
    public VerificarReservas(String idioma, String usuario) {
        initComponents();

        this.idioma = idioma;
        this.usuario = usuario;

        internacionaliza();
        organizarHeaders();
        jiduser.setText(usuario);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popsala = new javax.swing.JPopupMenu();
        salaCancelar = new javax.swing.JMenuItem();
        poplab = new javax.swing.JPopupMenu();
        labCancelar = new javax.swing.JMenuItem();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablab = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        tabsala = new javax.swing.JTable();
        titulo = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        juser = new javax.swing.JLabel();
        jiduser = new javax.swing.JLabel();
        titulosalas = new javax.swing.JLabel();
        cancelarSala = new javax.swing.JButton();
        cancelarLab = new javax.swing.JButton();
        titulolab = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();

        salaCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/delete.png"))); // NOI18N
        salaCancelar.setText("Cancelar");
        salaCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salaCancelarActionPerformed(evt);
            }
        });
        popsala.add(salaCancelar);

        labCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/delete.png"))); // NOI18N
        labCancelar.setText("Cancelar");
        poplab.add(labCancelar);

        setPreferredSize(new java.awt.Dimension(772, 556));
        setSize(new java.awt.Dimension(772, 556));
        addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                formComponentAdded(evt);
            }
        });
        addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                formAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        tablab.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID Solic", "ID Lab", "N Bancada", "Por Bancada", "Local", "TIpo", "Data", "Horário", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablab.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tablab.setShowGrid(true);
        tablab.setShowHorizontalLines(false);
        tablab.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(tablab);
        tablab.getColumnModel().getColumn(0).setResizable(false);
        tablab.getColumnModel().getColumn(1).setResizable(false);
        tablab.getColumnModel().getColumn(2).setResizable(false);
        tablab.getColumnModel().getColumn(3).setResizable(false);
        tablab.getColumnModel().getColumn(4).setResizable(false);
        tablab.getColumnModel().getColumn(5).setResizable(false);
        tablab.getColumnModel().getColumn(6).setResizable(false);
        tablab.getColumnModel().getColumn(7).setResizable(false);
        tablab.getColumnModel().getColumn(8).setResizable(false);

        tabsala.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID Solic", "ID Sala", "N Lugares", "Local", "TIpo", "Data", "Horário", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabsala.setColumnSelectionAllowed(true);
        tabsala.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tabsala.setShowGrid(true);
        tabsala.setShowHorizontalLines(false);
        tabsala.getTableHeader().setReorderingAllowed(false);
        tabsala.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabsalaMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(tabsala);
        tabsala.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tabsala.getColumnModel().getColumn(0).setResizable(false);
        tabsala.getColumnModel().getColumn(1).setResizable(false);
        tabsala.getColumnModel().getColumn(2).setResizable(false);
        tabsala.getColumnModel().getColumn(3).setResizable(false);
        tabsala.getColumnModel().getColumn(4).setResizable(false);
        tabsala.getColumnModel().getColumn(5).setResizable(false);
        tabsala.getColumnModel().getColumn(6).setResizable(false);
        tabsala.getColumnModel().getColumn(7).setResizable(false);

        titulo.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        titulo.setText("Verificar Solicitações");

        juser.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        juser.setText("Usuário");

        jiduser.setText("ID User");

        titulosalas.setText("Salas");

        cancelarSala.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/cross.png"))); // NOI18N
        cancelarSala.setText("Cancelar");
        cancelarSala.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarSalaActionPerformed(evt);
            }
        });

        cancelarLab.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/cross.png"))); // NOI18N
        cancelarLab.setText("Cancelar");

        titulolab.setText("Laboratorios");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 732, Short.MAX_VALUE)
                        .addContainerGap())
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jSeparator1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 740, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                .add(titulo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 190, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 276, Short.MAX_VALUE)
                                .add(juser)
                                .add(18, 18, 18)
                                .add(jiduser)
                                .add(158, 158, 158)))
                        .add(12, 12, 12))
                    .add(layout.createSequentialGroup()
                        .add(titulolab)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 546, Short.MAX_VALUE)
                        .add(cancelarLab, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 107, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(20, 20, 20))
                    .add(layout.createSequentialGroup()
                        .add(jSeparator2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 740, Short.MAX_VALUE)
                        .add(12, 12, 12))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jScrollPane4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 732, Short.MAX_VALUE)
                            .add(layout.createSequentialGroup()
                                .add(titulosalas)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 593, Short.MAX_VALUE)
                                .add(cancelarSala, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 107, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(titulo)
                    .add(juser, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jiduser))
                .add(8, 8, 8)
                .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(titulosalas)
                    .add(cancelarSala))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 175, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jSeparator2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(titulolab)
                    .add(cancelarLab))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 181, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(44, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tabsalaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabsalaMouseClicked
        // TODO add your handling code here:
        int lin = tabsala.getSelectedRow();
        int col = tabsala.getSelectedColumn();

        if(lin>-1 && col>-1){
            cancelarSala.setEnabled(true);
        }
        if(evt.getButton() == java.awt.event.MouseEvent.BUTTON1 && evt.getClickCount() == 2){
            popsala.show(tabsala, evt.getX(), evt.getY());
            idSolic = Integer.parseInt(tabsala.getValueAt(lin, 0).toString());
        }else{
            idSolic = Integer.parseInt(tabsala.getValueAt(lin, 0).toString());
        }
    }//GEN-LAST:event_tabsalaMouseClicked

    private void formComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_formComponentAdded
        // TODO add your handling code here:
        cancelarSala.setEnabled(false);
        cancelarLab.setEnabled(false);

        List<Reserva> lista;
        List<Sala> lista1 = new ArrayList<Sala>();
        Sala sala = new Sala();
        
        try{
            ReservaDAO resd = new ReservaDAO();
            SalaDAO salad = new SalaDAO();
            lista = resd.reservaListaSala(usuario);
            int tam = lista.size();

            int ids[] = new int[tam];

            for(int i=0;i<lista.size();i++){
                ids[i] = lista.get(i).getIdsala();
                System.out.println(""+ids[i]);
            }

            for(int i=0;i<lista.size();i++){
                sala = salad.sala(ids[i]);
                lista1.add(sala);
            }

            preencherTabelaSala(lista, lista1);
        }catch(SQLException e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_formComponentAdded

    private void formAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_formAncestorAdded
        // TODO add your handling code here:
        
        List<Reserva> lista;
        List<Sala> lista1 = new ArrayList<Sala>();
        Sala sala = new Sala();

        try{
            ReservaDAO resd = new ReservaDAO();
            SalaDAO salad = new SalaDAO();
            lista = resd.reservaListaSala(usuario);
            int tam = lista.size();

            int ids[] = new int[tam];

            for(int i=0;i<lista.size();i++){
                ids[i] = lista.get(i).getIdsala();
            }

            for(int i=0;i<lista.size();i++){
                sala = salad.sala(ids[i]);
                lista1.add(sala);
            }

            preencherTabelaSala(lista, lista1);
        }catch(SQLException e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_formAncestorAdded

    private void salaCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salaCancelarActionPerformed
        // TODO add your handling code here:
        List<Reserva> lista;
        List<Sala> lista1 = new ArrayList<Sala>();
        Sala sala = new Sala();
        int lin = tabsala.getSelectedRow();

        String sts = tabsala.getValueAt(lin, 7).toString();
        
        if(sts.equals(status[2])){
            Main.log.warning("O usuario: "+usuario+", tentou cancelar ums sala já reservada!");
            if(idioma.equals("en_US")){
                JOptionPane.showMessageDialog(null, "You can't cancel a RESERVED classroom!", "ERROR!", JOptionPane.ERROR_MESSAGE);
            }else{
                JOptionPane.showMessageDialog(null, "Você não pode cancelar uma sala RESERVADA!", "ERRO!", JOptionPane.ERROR_MESSAGE);
            }
        }else{
            int j;

            if(idioma.equals("en_US")){
                Object[] options = {"Yes","No"};
                j = JOptionPane.showOptionDialog(null,
                                "Do you really want to cancel this solicitation?",
                                "Cancel Solicitation",
                                JOptionPane.YES_NO_OPTION,
                                JOptionPane.QUESTION_MESSAGE,
                                null,
                                options,
                                options[1]);
            }
            else{
                Object[] options = {"Sim","Não"};
                j = JOptionPane.showOptionDialog(null,
                                "Deseja realmente cancelar está solicitação?",
                                "Cancelar Solicitação",
                                JOptionPane.YES_NO_OPTION,
                                JOptionPane.QUESTION_MESSAGE,
                                null,
                                options,
                                options[1]);
                }
            if (j==JOptionPane.YES_OPTION){
                 try{
                    ReservaDAO resd = new ReservaDAO();
                    SalaDAO salad = new SalaDAO();

                    resd.removerSolic(idSolic);

                    lista = resd.reservaListaSala(usuario);
                    int tam = lista.size();

                    int ids[] = new int[tam];

                    for(int i=0;i<lista.size();i++){
                        ids[i] = lista.get(i).getIdsala();
                    }

                    for(int i=0;i<lista.size();i++){
                        sala = salad.sala(ids[i]);
                        lista1.add(sala);
                    }

                    preencherTabelaSala(lista, lista1);

                }catch(SQLException e){
                    e.printStackTrace();
                }
            }
        }
    }//GEN-LAST:event_salaCancelarActionPerformed

    private void cancelarSalaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarSalaActionPerformed
        // TODO add your handling code here:
        List<Reserva> lista;
        List<Sala> lista1 = new ArrayList<Sala>();
        Sala sala = new Sala();

        int lin = tabsala.getSelectedRow();

        String sts = tabsala.getValueAt(lin, 7).toString();
        
        int idS = Integer.parseInt(tabsala.getValueAt(lin, 0).toString());

        if(sts.equals(status[2])){
            Main.log.warning("O usuario: "+usuario+", tentou cancelar ums sala já reservada!");
            if(idioma.equals("en_US")){
                JOptionPane.showMessageDialog(null, "You can't cancel a RESERVED classroom!", "ERROR!", JOptionPane.ERROR_MESSAGE);
            }else{
                JOptionPane.showMessageDialog(null, "Você não pode cancelar uma sala RESERVADA!", "ERRO!", JOptionPane.ERROR_MESSAGE);
            }
        }else{
            int j;

            if(idioma.equals("en_US")){
                Object[] options = {"Yes","No"};
                j = JOptionPane.showOptionDialog(null,
                                "Do you really want to cancel this solicitation?",
                                "Cancel Solicitation",
                                JOptionPane.YES_NO_OPTION,
                                JOptionPane.QUESTION_MESSAGE,
                                null,
                                options,
                                options[1]);
            }
            else{
                Object[] options = {"Sim","Não"};
                j = JOptionPane.showOptionDialog(null,
                                "Deseja realmente cancelar está solicitação?",
                                "Cancelar Solicitação",
                                JOptionPane.YES_NO_OPTION,
                                JOptionPane.QUESTION_MESSAGE,
                                null,
                                options,
                                options[1]);
                }
            if (j==JOptionPane.YES_OPTION){
                Main.log.info("Ö usuario: "+usuario+", cancelou a solicitacao da sala: "+idS);
                try{
                    ReservaDAO resd = new ReservaDAO();
                    SalaDAO salad = new SalaDAO();

                    resd.removerSolic(idS);

                    lista = resd.reservaListaSala(usuario);
                    int tam = lista.size();

                    int ids[] = new int[tam];

                    for(int i=0;i<lista.size();i++){
                        ids[i] = lista.get(i).getIdsala();
                    }

                    for(int i=0;i<lista.size();i++){
                        sala = salad.sala(ids[i]);
                        lista1.add(sala);
                    }

                    preencherTabelaSala(lista, lista1);

                }catch(SQLException e){
                    e.printStackTrace();
                }
            }
        }
    }//GEN-LAST:event_cancelarSalaActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelarLab;
    private javax.swing.JButton cancelarSala;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel jiduser;
    private javax.swing.JLabel juser;
    private javax.swing.JMenuItem labCancelar;
    private javax.swing.JPopupMenu poplab;
    private javax.swing.JPopupMenu popsala;
    private javax.swing.JMenuItem salaCancelar;
    private javax.swing.JTable tablab;
    private javax.swing.JTable tabsala;
    private javax.swing.JLabel titulo;
    private javax.swing.JLabel titulolab;
    private javax.swing.JLabel titulosalas;
    // End of variables declaration//GEN-END:variables

    public void preencherTabelaSala(List<Reserva> lista, List<Sala> lista1){

        DefaultTableModel tabela = (DefaultTableModel) tabsala.getModel();

        while (tabela.getRowCount() > 0) { //vai pegar todas as linha selecionadas maiores que zero, é vai remove-las!
            tabela.removeRow(0);
        }

        String[] linha = new String[]{null, null, null, null, null, null, null, null, null};
        for (int i = 0; i < lista.size(); i++) {
            tabela.addRow(linha);
            tabela.setValueAt(lista.get(i).getIdreserva(), i, 0);
            tabela.setValueAt(lista.get(i).getIdsala(), i, 1);
            tabela.setValueAt(lista1.get(i).getQtdlugares(), i, 2);
            tabela.setValueAt(lista1.get(i).getLocalsala(), i, 3);
            tabela.setValueAt(lista1.get(i).getTiposala(), i, 4);
            tabela.setValueAt(lista.get(i).getData(), i, 5);
            tabela.setValueAt(horario[lista.get(i).getHora() - 1], i, 6);
            if(lista.get(i).getStatus().equals("PENDENTE")){
                tabela.setValueAt(status[1], i, 7);
            }else{
                if(lista.get(i).getStatus().equals("RESERVADA")){
                    tabela.setValueAt(status[2], i, 7);
                }else{
                    tabela.setValueAt(status[0], i, 7);
                }
            }
            
        }

        colorirTabela(lista.size());
    }

    public void colorirTabela(int tam){
        for(int row=0;row<tam;row++){
            for(int column=0;column<8;column++){
                tabsala.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
                    public Component getTableCellRendererComponent(JTable table, Object value,
                            boolean isSelected, boolean hasFocus, int row, int column) {
                        super.getTableCellRendererComponent(table, value, isSelected,
                                hasFocus, row, column);

                        if(row==row && column<7){
                            setBackground(null);
                            setForeground(Color.BLACK);
                        }else{
                            if(tabsala.getValueAt(row, column).toString().equals(status[2])){
                                setBackground(new java.awt.Color(38, 223, 38));
                                setForeground(Color.BLACK);
                            }else{
                                if(tabsala.getValueAt(row, column).toString().equals(status[1])){
                                    setBackground(new java.awt.Color(243, 245, 41));
                                    setForeground(Color.BLACK);
                                }else{
                                    if(tabsala.getValueAt(row, column).toString().equals(status[0])){
                                        setBackground(new java.awt.Color(235, 31, 31));
                                        setForeground(Color.WHITE);
                                    }else{
                                        setBackground(null);
                                        setForeground(Color.BLACK);
                                    }
                                }
                            }
                        }

                        return this;
                    }
                });
            }
        }
    }

    public void internacionaliza(){
        ResourceBundle palavras = ResourceBundle.getBundle("idiomas.Lingua_"+idioma);

        titulo.setText(palavras.getString("verificar.titulo"));
        titulosalas.setText(palavras.getString("verificar.titulosala"));
        titulolab.setText(palavras.getString("verificar.titulolab"));
        juser.setText(palavras.getString("verificar.user"));
        cancelarLab.setText(palavras.getString("verificar.cancelar"));
        cancelarSala.setText(palavras.getString("verificar.cancelar"));

        headerSala[0] = palavras.getString("verificar.idsolic");
        headerSala[1] = palavras.getString("verificar.idsala");
        headerSala[2] = palavras.getString("verificar.lugares");
        headerSala[3] = palavras.getString("verificar.local");
        headerSala[4] = palavras.getString("verificar.tipo");
        headerSala[5] = palavras.getString("verificar.data");
        headerSala[6] = palavras.getString("verificar.horario");
        headerSala[7] = palavras.getString("verificar.status");

        headerLab[0] = palavras.getString("verificar.idsolic");
        headerLab[1] = palavras.getString("verificar.idlab");
        headerLab[2] = palavras.getString("verificar.nbancada");
        headerLab[3] = palavras.getString("verificar.pbancada");
        headerLab[4] = palavras.getString("verificar.local");
        headerLab[5] = palavras.getString("verificar.tipo");
        headerLab[6] = palavras.getString("verificar.data");
        headerLab[7] = palavras.getString("verificar.horario");
        headerLab[8] = palavras.getString("verificar.status");

        status[0] = palavras.getString("verificar.negada");
        status[1] = palavras.getString("verificar.pendente");
        status[2] = palavras.getString("verificar.reservada");
    }

    public void organizarHeaders(){
        for(int i=0;i<8;i++){
            tabsala.getTableHeader().setFont(new java.awt.Font(""+headerSala[i],java.awt.Font.PLAIN, 11));
            tabsala.getColumnModel().getColumn(i).setHeaderValue(""+headerSala[i]);
        }

        for(int i=0;i<9;i++){
            tablab.getTableHeader().setFont(new java.awt.Font(""+headerLab[i],java.awt.Font.PLAIN, 11));
            tablab.getColumnModel().getColumn(i).setHeaderValue(""+headerLab[i]);
        }
    }
}
